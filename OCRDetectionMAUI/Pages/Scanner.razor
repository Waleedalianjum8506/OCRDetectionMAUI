@page "/barcodescanner"

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@if (isGranted == false)
{
    <p>Camera is not accessible!</p>
}
else {
    <div class="select">
    <label for="videoSource">Video source: </label>
    <select id="videoSource"></select>
</div>

<div id="videoview">
    <div class="dce-video-container" id="videoContainer"></div>
    <canvas id="overlay"></canvas>
</div>
}


@code {
    private bool isGranted = false;
    String result = "";
    private DotNetObjectReference<Scanner> objRef;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }
    
    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (!e.Location.Contains("barcodescanner"))
        {
            Task.Run(async () =>
            {
                await JSRuntime.InvokeAsync<Boolean>("jsFunctions.destroy");
            });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var status = await Permissions.CheckStatusAsync<Permissions.Camera>();
            if (status == PermissionStatus.Granted)
            {
                isGranted = true;
            }
            else
            {
                status = await Permissions.RequestAsync<Permissions.Camera>();
                if (status == PermissionStatus.Granted)
                {
                    isGranted = true;
                }
            }

            if (isGranted)
            {
                StateHasChanged();
                objRef = DotNetObjectReference.Create(this);
                await JSRuntime.InvokeAsync<Boolean>("jsFunctions.initScanner", objRef, "videoContainer", "videoSource", "overlay");
            }
        }
    }


    [JSInvokable]
    public void ReturnBarcodeResultsAsync(String text)
    {
        result = text;
        StateHasChanged();
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}
